// <auto-generated />
using System;
using AssociationWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AssociationWebApp.Migrations
{
    [DbContext(typeof(AssociationDbContext))]
    [Migration("20201109163838_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssociationWebApp.Models.Associated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnName("birthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("cpf")
                        .HasMaxLength(11)
                        .IsUnicode(false);


                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200)
                        .IsUnicode(false);


                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasName("AK_Associated");

                    b.ToTable("Associated");
                });

            modelBuilder.Entity("AssociationWebApp.Models.Association", b =>
                {
                    b.Property<int>("AssociatedId")
                        .HasColumnName("associatedId");

                    b.Property<int>("CompanyId")
                        .HasColumnName("companyId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("AssociatedId", "CompanyId", "Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Association");
                });

            modelBuilder.Entity("AssociationWebApp.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnName("cnpj")
                        .HasMaxLength(14)
                        .IsUnicode(false);


                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200)
                        .IsUnicode(false);


                    b.HasKey("Id");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasName("AK_Company");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("AssociationWebApp.Models.Association", b =>
                {
                    b.HasOne("AssociationWebApp.Models.Associated", "Associated")
                        .WithMany("Associations")
                        .HasForeignKey("AssociatedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AssociationWebApp.Models.Company", "Company")
                        .WithMany("Associations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
